/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/84b83859-a91b-481d-9979-2fc650e6fcee 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float duration;
  int distance;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
const int trigger = 2;
const int echo = 3;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(trigger, OUTPUT);
  pinMode(echo, INPUT);
  // Defined in thingProperties.h
  initProperties();
  minValue = 20;
  maxValue = 100;
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}
int getUltrasonicDistance(){
  float duration;
  // Assure the trigger pin is LOW:
  digitalWrite(trigger, LOW);
  // Brief pause:
  delayMicroseconds(5);

  // Trigger the sensor by setting the trigger to HIGH:
  digitalWrite(trigger, HIGH);
  // Wait a moment before turning off the trigger:
  delayMicroseconds(10);
  // Turn off the trigger:
  digitalWrite(trigger, LOW);

  // Read the echo pin:
  duration = pulseIn(echo, HIGH);
  // Calculate the distance in centimeter (CM):
  distance = duration * 0.034 / 2;

  // Uncomment this line to return value in IN instead of CM:
  //distance = distance * 0.3937008

  // Return the distance read from the sensor:
  return distance;
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  Serial.print("Distance: ");
  Serial.println(getUltrasonicDistance());
  Serial.println(minValue);
  if(distance < minValue){
    belowAlarm = true;
  } else if (distance > maxValue)
  {
    aboveAlarm = true;
  }else{
    belowAlarm = false;
    aboveAlarm = false;
  }
  // Wait one second before continuing:
  delay(1000);
}

/*
  Since Distance is READ_WRITE variable, onDistanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDistanceChange()  {
  // Add your code here to act upon Distance change
}
/*
  Since AboveAlarm is READ_WRITE variable, onAboveAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAboveAlarmChange()  {
  // Add your code here to act upon AboveAlarm change
}
/*
  Since BelowAlarm is READ_WRITE variable, onBelowAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBelowAlarmChange()  {
  // Add your code here to act upon BelowAlarm change
}
/*
  Since MaxValue is READ_WRITE variable, onMaxValueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaxValueChange()  {
  // Add your code here to act upon MaxValue change
}
/*
  Since MinValue is READ_WRITE variable, onMinValueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMinValueChange()  {
  // Add your code here to act upon MinValue change
}